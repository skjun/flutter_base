import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about => "About";
  String get aliPay => "AliPay";
  String get appName => "EasyRefresh";
  String get autoLoad => "Auto load";
  String get autoLoadDescribe =>
      "Automatically refresh the slide to the bottom";
  String get ballPulseDescribe => "Ball pulse style";
  String get basicUse => "Basic";
  String get basicUseDescribe => "Basic use of EasyRefresh";
  String get bezierCircleDescribe => "Popup circle style";
  String get bezierHourGlassDescribe => "Popup HourGlass style";
  String get bobMinion => "Bob minion";
  String get bobMinionDescribe => "Cute yellow Minions";
  String get bottomBouncing => "Bottom bouncing";
  String get bottomBouncingDescribe => "Bottom can be crossed";
  String get chatPage => "Chat page";
  String get chatPageDescribe => "Chat page example";
  String get chengdu => "China - ChengDu";
  String get city => "City";
  String get classic => "Classic";
  String get classicDescribe => "Classic and default";
  String get completeLoad => "Load done";
  String get completeRefresh => "Refresh done";
  String get controlFinish => "Control finish";
  String get controlFinishDescribe =>
      "Using Controller to End Asynchronous Tasks";
  String get cupertinoDescribe => "ios style";
  String get customScrollViewDescribe =>
      "List with AppBar Folding, listener example";
  String get deliveryDescribe => "Express balloon";
  String get direction => "Direction";
  String get email => "E-Mail";
  String get emptyWidget => "Empty widget";
  String get emptyWidgetDescribe => "Show empty widget when there is no data";
  String get firstRefresh => "First refresh";
  String get firstRefreshDescribe => "First refresh widget";
  String get floatView => "Floating view";
  String get floatViewDescribe =>
      "At the top or bottom view floating on the list";
  String get github => "Github";
  String get hangzhou => "China - HangZhou";
  String get headerFloat => "Header float";
  String get headerFloatDescribe => "Header is displayed on the list";
  String get horizontal => "Horizontal";
  String get infiniteLoad => "Infinite load";
  String get infiniteLoadDescribe => "Slide to bottom trigger loading";
  String get joinDiscussion => "Join the discussion";
  String get joinDiscussionDescribe => "Join the QQ group 554981921";
  String get linkHeader => "Header linker";
  String get linkHeaderDescribeDescribe => "Customize Header with linker";
  String get listDirection => "List direction";
  String get listEmbed => "List embed";
  String get listEmbedDescribe =>
      "Use the connector to set the Header and Footer positions";
  String get listReverse => "List reverse";
  String get loadFailed => "Load failed";
  String get loadFinish => "Load completed";
  String get loadMore => "LoadMore";
  String get loadSwitch => "Load switch";
  String get loadSwitchDescribe => "Whether to turn on load";
  String get loaded => "Load completed";
  String get loading => "Loading...";
  String get manualControl => "Manual control";
  String get manualControlDescribe =>
      "Control the timing of completion of refresh and load";
  String get materialDescribe => "Material design, Android style";
  String get me => "Me";
  String get more => "More";
  String get moreStyle => "More style";
  String get moreStyleDescribe =>
      "Come soon! You can also refer to the source code customization";
  String get name => "Name";
  String get nestedScrollViewDescribe => "NestedScrollView example";
  String get noBald => "Has not the bald";
  String get noData => "No data";
  String get noMore => "No more";
  String get old => "Old";
  String get payPal => "PayPal";
  String get phoenixDescribe => "Golden campus";
  String get phone => "Phone";
  String get projectAddress => "Project address";
  String get pullToRefresh => "Pull to refresh";
  String get pushToLoad => "Pull to load";
  String get qqGroup => "QQ group";
  String get qqPay => "QQ Pay";
  String get refresh => "Refresh";
  String get refreshFailed => "Refresh failed";
  String get refreshFinish => "Refresh completed";
  String get refreshSwitch => "Refresh switch";
  String get refreshSwitchDescribe => "Whether to turn on refresh";
  String get refreshed => "Refresh completed";
  String get refreshing => "Refreshing...";
  String get releaseToLoad => "Release to load";
  String get releaseToRefresh => "Release to refresh";
  String get reverse => "reverse";
  String get sample => "Sample";
  String get scrollBar => "ScrollBar";
  String get scrollBarDescribe => "Add a scroll bar to the list";
  String get secondFloor => "Second floor";
  String get secondFloorDescribe => "Imitate the second floor of Taobao";
  String get send => "Send";
  String get spaceDescribe => "Flare animation - Space";
  String get star => "Star project";
  String get style => "Style";
  String get supportAuthor => "Support the author";
  String get supportAuthorDescribe => "Your support is my biggest motivation";
  String get swiperDescribe => "Swiper example, resolve sliding conflicts";
  String get tabViewWidgetDescribe => "List and Grid consist of TabBarView";
  String get taskIndependence => "Task independence";
  String get taskIndependenceDescribe =>
      "Refresh and load tasks are not affected by each other";
  String get taurusDescribe => "Rushing into the sky";
  String get topBouncing => "Top bouncing";
  String get topBouncingDescribe => "Top can be crossed";
  String get updateAt => "Update at %T";
  String get userProfile => "User Profile";
  String get userProfileDescribe => "User Profile with the springback effect";
  String get vertical => "Vertical";
  String get vibration => "vibration";
  String get vibrationDescribe => "Triggered vibration feedback";
  String get weiXinPay => "WeiXin Pay";
  String get welcomeToSecondFloor => "Welcome to second floor";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get qqPay => "QQ钱包";
  @override
  String get bezierCircleDescribe => "弹出圆圈";
  @override
  String get bottomBouncing => "底部回弹";
  @override
  String get about => "关于";
  @override
  String get updateAt => "更新于 %T";
  @override
  String get floatView => "浮动视图";
  @override
  String get swiperDescribe => "Swiper示例，解决滑动冲突";
  @override
  String get refreshFailed => "刷新失败";
  @override
  String get pushToLoad => "拉动加载";
  @override
  String get manualControlDescribe => "控制刷新和加载的完成时机";
  @override
  String get github => "Github";
  @override
  String get taskIndependenceDescribe => "刷新和加载任务互不受影响(不推荐)";
  @override
  String get old => "年龄";
  @override
  String get moreStyleDescribe => "会越来越多哦!你也可以参考源码自定义";
  @override
  String get loadFailed => "加载失败";
  @override
  String get supportAuthor => "支持作者";
  @override
  String get loading => "正在加载...";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get moreStyle => "更多样式";
  @override
  String get completeLoad => "完成加载";
  @override
  String get phone => "电话";
  @override
  String get style => "样式";
  @override
  String get weiXinPay => "微信钱包";
  @override
  String get noMore => "没有更多数据";
  @override
  String get listEmbed => "列表嵌入";
  @override
  String get listReverse => "列表反向";
  @override
  String get city => "城市";
  @override
  String get infiniteLoadDescribe => "滑动到底部自动触发加载";
  @override
  String get emptyWidget => "空视图";
  @override
  String get loadFinish => "加载完成";
  @override
  String get joinDiscussion => "加入讨论";
  @override
  String get deliveryDescribe => "气球快递";
  @override
  String get ballPulseDescribe => "球脉冲样式";
  @override
  String get infiniteLoad => "无限加载";
  @override
  String get customScrollViewDescribe => "带头部折叠的列表，监听器示例";
  @override
  String get releaseToRefresh => "释放刷新";
  @override
  String get hangzhou => "中国 - 杭州";
  @override
  String get refreshSwitchDescribe => "是否开启刷新";
  @override
  String get bottomBouncingDescribe => "底部可越界";
  @override
  String get emptyWidgetDescribe => "没有数据时显示空视图";
  @override
  String get secondFloorDescribe => "模仿淘宝二楼";
  @override
  String get email => "邮箱";
  @override
  String get star => "Star 项目";
  @override
  String get more => "更多";
  @override
  String get refresh => "刷新";
  @override
  String get joinDiscussionDescribe => "加入QQ群554981921,进行讨论";
  @override
  String get reverse => "反向";
  @override
  String get sample => "示例";
  @override
  String get scrollBarDescribe => "为列表添加滚动条";
  @override
  String get classic => "经典样式";
  @override
  String get headerFloatDescribe => "Header显示在列表之上";
  @override
  String get phoenixDescribe => "金色校园";
  @override
  String get manualControl => "手动控制";
  @override
  String get payPal => "PayPal";
  @override
  String get aliPay => "支付宝";
  @override
  String get welcomeToSecondFloor => "欢迎来到二楼";
  @override
  String get materialDescribe => "质感设计,Android样式";
  @override
  String get linkHeader => "Header连接器";
  @override
  String get autoLoad => "自动加载";
  @override
  String get listEmbedDescribe => "使用连接器设置Header和Footer位置";
  @override
  String get cupertinoDescribe => "ios风格";
  @override
  String get tabViewWidgetDescribe => "List和Grid组成的TabBarView";
  @override
  String get vibration => "震动";
  @override
  String get releaseToLoad => "释放加载";
  @override
  String get loaded => "加载完成";
  @override
  String get horizontal => "水平";
  @override
  String get firstRefreshDescribe => "首次刷新视图";
  @override
  String get topBouncing => "顶部回弹";
  @override
  String get nestedScrollViewDescribe => "NestedScrollView示例";
  @override
  String get secondFloor => "二楼";
  @override
  String get me => "我";
  @override
  String get floatViewDescribe => "顶部或底部视图浮动在列表上";
  @override
  String get loadSwitchDescribe => "是否开启加载";
  @override
  String get loadMore => "加载";
  @override
  String get noBald => "没到秃头的年龄";
  @override
  String get supportAuthorDescribe => "你的支持是我最大的动力";
  @override
  String get chatPage => "聊天页面";
  @override
  String get qqGroup => "QQ群";
  @override
  String get name => "名字";
  @override
  String get bezierHourGlassDescribe => "弹出HourGlass";
  @override
  String get listDirection => "列表方向";
  @override
  String get controlFinish => "控制结束";
  @override
  String get taskIndependence => "任务独立";
  @override
  String get refreshSwitch => "刷新开关";
  @override
  String get send => "发送";
  @override
  String get chatPageDescribe => "模仿聊天页面";
  @override
  String get classicDescribe => "经典(默认)风格";
  @override
  String get controlFinishDescribe => "使用控制器结束异步任务";
  @override
  String get vertical => "垂直";
  @override
  String get userProfile => "个人中心";
  @override
  String get bobMinion => "Bob小黄人";
  @override
  String get bobMinionDescribe => "可爱的小黄人";
  @override
  String get taurusDescribe => "冲上云霄";
  @override
  String get basicUse => "基本使用";
  @override
  String get spaceDescribe => "Flare动画 - 星空";
  @override
  String get completeRefresh => "完成刷新";
  @override
  String get direction => "方向";
  @override
  String get basicUseDescribe => "EasyRefresh的基本使用";
  @override
  String get scrollBar => "滚动条";
  @override
  String get linkHeaderDescribeDescribe => "使用连接器自定义Header";
  @override
  String get vibrationDescribe => "触发震动反馈";
  @override
  String get refreshed => "刷新完成";
  @override
  String get appName => "EasyRefresh";
  @override
  String get pullToRefresh => "拉动刷新";
  @override
  String get userProfileDescribe => "带回弹效果的个人中心";
  @override
  String get chengdu => "中国 - 成都";
  @override
  String get firstRefresh => "首次刷新";
  @override
  String get loadSwitch => "加载开关";
  @override
  String get topBouncingDescribe => "顶部可越界";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get projectAddress => "项目地址";
  @override
  String get noData => "没有数据";
  @override
  String get autoLoadDescribe => "滑到底部自动刷新";
  @override
  String get headerFloat => "Header浮动";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
        // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
